# Performs first layer of V&V for Microarray Processing: File existence checks
from pathlib import Path

import yaml
import pandas as pd

def load_meta(runsheet: Path):
    df = pd.read_csv(runsheet)
    df = df.set_index("sample_name") 
    return df.to_dict(orient="index")

def main(config_fs_f: Path, runsheet: Path, platform: str):
    """ Loads file search configuration file and runsheet then perform files existence validation 

    config_fs_f: yaml file with file patterns to search for
    runsheet: csv file to pull metadata from (as generated by the AST scripts)
    platform: a string denoting the platrom type (must match the two topmost keys in the yaml file pattern config), e.g. 'affymetrix:one_channel'
    """

    with open(config_fs_f, "r") as f:
        config_fs =  yaml.safe_load(f)

    # extract only the relevant config
    platform_manufact, platform_channels = platform.split(':')
    config_fs = config_fs[platform_manufact][platform_channels]
    print(config_fs)

    metas = load_meta(runsheet)

    for sample_name, meta in metas.items():
        print(sample_name)
        # search for each file pattern
        for file_type, variants in config_fs.items():
            print(f"Searching for type: {file_type}")
            for variant_key, variant_pattern in variants.items():
                search_path = variant_pattern.format(sample_name=sample_name, source_name=meta['Source Name'], hybridization_assay=meta['Hybridization Assay Name'] )
                print(f"{variant_key}:{search_path}")
