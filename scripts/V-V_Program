#! /usr/bin/env python
""" Validation and Verification Program For RNASeq Consenus Pipeline
"""
##############################################################
# Imports
##############################################################
import sys
import argparse
from pathlib import Path

from VV.utils import load_params, load_config
from VV.parameters import PARAMS as MODULEPARAMS
from VV import parameters
DEFAULT_PARAMS_FILE = parameters.__file__

from VV import RNASeq_VV
from VV import __version__

##############################################################
# Utility Functions To Handle Logging, Config and CLI Arguments
##############################################################

def _parse_args():
    """ Parse command line args.
    """
    parser = argparse.ArgumentParser(prog="V-V_Program", description='Perform Automated V&V on '
                                                                     'raw and processed for GeneLab.')
    parser.set_defaults(subcommand="Nothing")
    parser.set_defaults(parameter_file=DEFAULT_PARAMS_FILE)

    subparsers = parser.add_subparsers(help='sub-command help')
    parser_RNASeq = subparsers.add_parser('RNASeq',
        help='Perform Automated V&V on data processed through the RNASeq Consensus Pipeline')

    parser_RNASeq.add_argument('--config', metavar='file.config', nargs='+', required=True,
                        help='INI format configuration file')

    parser_RNASeq.add_argument('--parameter_file', metavar='file.py', default=DEFAULT_PARAMS_FILE,
                        help=f"Override parameter set with custom file. " \
                             f"This file MUST match the format for each entry in "\
                             f"this modules VV/parameters.py file. "\
                             f"A copy of the default parameter set can be created "\
                             f"with the --create_parameter_file subcommand. ")

    parser_RNASeq.add_argument('--parameter_set', default="DEFAULT",
                        help=f"Parameter set to use. " \
                             f"located in parameters file. "\
                             f"Available parameter sets: {list(MODULEPARAMS.keys())}")
    parser_RNASeq.set_defaults(subcommand="RNASeq")

    parser_PARAMS = subparsers.add_parser('Params',
        help='Handle V&V parameter files to examine flagging thresholds and settings')

    parser_PARAMS.add_argument('--copy_module_param_file', action='store_true',
                        help=f"Creates parameter file in current directory for "\
                             f"custom parameter sets. When using this custom "\
                             f"parameter file.  Make sure to indicate "\
                             f"this file using --parameter_file!")

    parser_PARAMS.add_argument('--list_parameter_sets', action="append", nargs="?",
                        help=f"Lists parameter sets found in a parameter file " \
                             f"If no file is specified, the module's parameter file "\
                             f"parameter sets are listed.")

    parser_PARAMS.set_defaults(subcommand="PARAMS")

    args = parser.parse_args()
    if args.subcommand == "Nothing":
        print(f"No subcommand specified. Printing main program help")
        parser.print_help()
        sys.exit()
    return args

def _create_param_file(**args):
    from VV import parameters
    import shutil
    copy = Path("copy_of_parameters.py")
    original = Path(parameters.__file__)
    print(f"Creating copy of {original} -> {copy}")
    if copy.is_file():
        print(f"{copy} already exists! Canceling to avoid overwrite.")
        sys.exit(1)
    shutil.copy(original, copy)
    print(f"Successfully created {copy}!")
    sys.exit(0)

if __name__ == '__main__':
    program_header = f"VV Program Version: {__version__}"
    print(f"{'┅'*(len(program_header)+4)}")
    print(f"┇ {program_header} ┇")
    print(f"{'┅'*(len(program_header)+4)}")
    # parse commandline args and read config file
    args = _parse_args()
    if args.subcommand == "RNASeq":
        RNASeq_VV.main(load_config(args.config),
                       load_params(args.parameter_file, args.parameter_set))

    elif args.subcommand == "PARAMS":
        if args.copy_module_param_file:
            _create_param_file()

        elif args.list_parameter_sets:
            # Load parameters
            if args.list_parameter_sets[0]:
                PARAMS = load_params(args.list_parameter_sets[0])
            else:
                PARAMS = load_params(DEFAULT_PARAMS_FILE)

            print(f"The following parameter sets were found: {list(PARAMS.keys())}")
        else:
            print("Use --help to display subcommand help")
    else:
        raise ValueError(f"How did you even set args.subcommand to something wrong?")
